;
;Options configured in a .conf file will be overridden by command line arguments
; but replace the application defaults.
; Copy this file to create a custom '.conf' file in this directory.
; Uncomment and specify any settings you wish to include
;

[Pathing for input/output]
# image = "./sample_images"
# sample_id = "./sample_images/id.csv"
# out_dir = "./sample_images"

[Multithreading option]
# processes = 1

[File parsing options]
time_regex = ".*(?P<year>[0-9]{4})-(?P<month>0[1-9]|1[0-2])-(?P<day>0[1-9]|[12][0-9]|3[01])_(?P<hour>[01][0-9]|2[0-4])h(?P<minute>[0-5][0-9])m.*"  # year, month, day, hour, minute
time_format = "%Y-%m-%d_%Hh%Mm"
block_regex = ".*pi([0-9]).*"
# area_file = "area.csv"  # if you want to re-analyse existing area data and avoid repeating the image segmentation

[Debug options]
# image_debug = "plot"  # "plot" loads matplotlib figures and "print" saves png files
loglevel = "INFO"  # "info" just prints the processed files and any tuned parameters, "debug" is quite verbose
overlay = True  # Displays segmented mask over the original image, useful for quality control

[Colour config]
# circle_channel = "b"
#target_colour = ["5,-2,7","1,-2,2","23,-8,27","43,-2,50","16,-8,14","32,-11,38","27,0,33","32,-2,38","27,-1,33","25,-13,30","58,-4,63","54,3,41","38,-9,40","26,-8,30","47,-5,42","49,1,50","47,-4,51","27,-7,22","37,-6,34","23,-4,16"]
# pi1 # ["55,-1,60","22,-7,29","9,-1,12","56,2,60","46,-1,44","1,-1,1","21,-6,28","63,0,47","39,-14,45"]
# pi2 # ["32,-9,35","21,-4,16","30,-2,33","31,-5,34","20,-5,19","46,-5,42","53,-5,52","51,-1,50"]
# pi3 # ["28,0,35","31,-3,37","20,-7,17","33,-9,40","46,-2,53","24,-8,29","29,-12,35","49,-1,55"]
# all ["55,-1,60","22,-7,29","9,-1,12","56,2,60","46,-1,44","1,-1,1","21,-6,28","63,0,47","32,-9,35","21,-4,16","30,-2,33","31,-5,34","20,-5,19","46,-5,42","53,-5,52","51,-1,50","28,0,35","31,-3,37","20,-7,17","33,-9,40","46,-2,53","24,-8,29","29,-12,35","49,-1,55","39,-14,45"]

target_colour = ["55,-1,60","22,-7,29","9,-1,12","56,2,60","46,-1,44","1,-1,1","21,-6,28","63,0,47","39,-14,45"]
target_dist = 6
graph_dist = 6

[Noise removal options]
# remove = 100
# fill = 100

[Area calculation]
scale = 5  # Scale of pixels per unit distance (from which area is calculated). e.g. 160px/32mm = 5 px/mm

[RGR fit options]
# fit_start = 0  # A fixed day from which to start considering data for fitting of the RGR model
# fit_end = 7 # A fixed day from which to end considering data for fitting of the RGR model

[Layout detection options]
# circles_per_plate = 6  # In plate clustering, the number of circles per plate",
# n_plates = 8  # In plate layout, the number of plates per image",
circle_diameter = 160  # The diameter of rings surrounding each subject (in pixels)
plate_circle_separation = 40  # Distance between circles within a plate (in px), affects the cut height for plate detection.
plate_width = 440  # Shortest edge length of plate, used to calculate cut height in clustering to find rows of adjacent plates

[ID sequence options (circles within plates)]
circles_cols_first = True # In circle layout, ID's typically increment by rows first (set this to start by columns)
# circles_right_left = False  # In circle layout, ID's typically increment left to right (set this to go right to left)
circles_bottom_top = True # In circle layout, ID's typically increment from top to bottom (set this to go from bottom to top)
[ID sequence options (plates within blocks)]
# plates_cols_first = False # In plate layout, ID's typically increment by rows first (set this to start by columns)
# plates_right_left = False  # In plate layout, ID's typically increment left to right (set this to go right to left)
plates_bottom_top = True # In plate layout, ID's typically increment from top to bottom (set this to go from bottom to top)
